import math
from pyproj import Proj, transform


# Function to calculate pixel differences with middle point correction and yaw adjustments
def calculate_pixel_differences_with_middle_point_correction(image_metadata):
    # Sort images by their filenames to ensure correct order
    sorted_images = sorted(image_metadata.keys())
    results = []

    for i in range(len(sorted_images) - 1):
        # Get metadata for consecutive images
        img1 = sorted_images[i]
        img2 = sorted_images[i + 1]

        meta1 = image_metadata[img1]
        meta2 = image_metadata[img2]

        # Extract latitude, longitude, GSD, gimbal, flight angles, and altitude
        lat1, lon1, gsd1, altitude1 = meta1['Latitude'], meta1['Longitude'], meta1['GSD'], meta1['Relative Altitude']
        lat2, lon2, gsd2, altitude2 = meta2['Latitude'], meta2['Longitude'], meta2['GSD'], meta2['Relative Altitude']

        gimbal_pitch1, gimbal_yaw1, flight_yaw1 = (
            meta1.get('Gimbal Pitch Degree', -90),  # Default to downward (-90)
            meta1.get('Gimbal Yaw Degree', 0),
            meta1.get('Flight Yaw Degree', 0)
        )
        gimbal_pitch2, gimbal_yaw2, flight_yaw2 = (
            meta2.get('Gimbal Pitch Degree', -90),
            meta2.get('Gimbal Yaw Degree', 0),
            meta2.get('Flight Yaw Degree', 0)
        )

        # Check if metadata is valid
        if None in (lat1, lon1, gsd1, altitude1, lat2, lon2, gsd2, altitude2):
            print(f"Skipping image pair {img1} and {img2} due to missing data.")
            continue

        # Average GSD and altitude for the two images
        avg_gsd = (gsd1 + gsd2) / 2
        avg_altitude = (altitude1 + altitude2) / 2

        # Create a projection object for WGS84 (lat/lon) to UTM (zone determined automatically)
        utm_proj_1 = Proj(proj="utm", zone=32, ellps="WGS84")  # Use appropriate UTM zone for your location
        utm_x1, utm_y1 = utm_proj_1(lon1, lat1) 
        utm_proj_2 = Proj(proj="utm", zone=32, ellps="WGS84")  # Use appropriate UTM zone for your location
        utm_x2, utm_y2 = utm_proj_2(lon2, lat2)
        #print(f"UTM Coordinates: X = {utm_x1}, Y = {utm_y1}")
        #print(f"UTM Coordinates: X = {utm_x2}, Y = {utm_y2}")

        x_utm_diff = utm_x2 - utm_x1
        y_utm_diff = utm_y2 - utm_y1
        #print(f"UTM Differences: dX = {x_utm_diff}, dY = {y_utm_diff}")

        # Convert ground distances to pixel distances
        delta_x_pixels = x_utm_diff / avg_gsd
        delta_y_pixels = y_utm_diff / avg_gsd
        #print("delta_x_pixels",delta_x_pixels)
        #print("delta_y_pixels",delta_y_pixels)

        # Average gimbal and flight yaw
        avg_gimbal_yaw = (gimbal_yaw1 + gimbal_yaw2) / 2
        avg_flight_yaw = (flight_yaw1 + flight_yaw2) / 2 

        # Combined yaw adjustment
        avg_total_yaw = avg_gimbal_yaw + avg_flight_yaw
        #print("avg_total_yaw",avg_total_yaw)

        # Adjust pixel differences for yaw
        delta_x_corrected = delta_x_pixels * math.cos(math.radians(avg_total_yaw)) - delta_y_pixels * math.sin(math.radians(avg_total_yaw))
        delta_y_corrected = delta_x_pixels * math.sin(math.radians(avg_total_yaw)) + delta_y_pixels * math.cos(math.radians(avg_total_yaw))
        #print("delta_x_corrected",delta_x_corrected)
        #print("delta_y_corrected",delta_y_corrected)


        # Store results
        results.append({
            'image1': img1,
            'image2': img2,
            'delta_x_pixels': delta_x_corrected,
            'delta_y_pixels': delta_y_corrected
        })

    return results

        

# Use the metadata from the first program
# Assuming `image_metadata` was generated by the first program
pixel_differences = calculate_pixel_differences_with_middle_point_correction(image_metadata)

# Print results
for diff in pixel_differences:
    print(diff)
